# Stages of pipeline, should match with stage tag inside each job.
# Each stages executes in sequence, if previous job fails, then all the preceeding jobs are skipped.
stages:
  - mavenbuild
  - maventest
  - autodeploy
  - iosbuild

# tags: "shell" should match with the tag name provided to runner, for spring runner should execute in shell.
# Notice that in petclinic project, the spring project is in root of master, if yours is in folder then cd to that folder.
maven-build:
  stage: mavenbuild
  tags:
    - backend_tag
  script:
    - cd Backend/src/spring-boot
    - mvn package -B
  
# artifacts are created when job executes successfully, and can be manually downloaded from GitLab GUI.
# artifacts are not mandatory, buts it good practice, in case auto deploy fails, you can manually download the jar.
maven-test:
  stage: maventest
  tags:
    - backend_tag
  script:
    - cd Backend/src/spring-boot
    - mvn test
  artifacts:
    paths:
      - /var/www/html/*.jar

# Below stage builds, deploys and executes the jar as service.
# Make sure there is /target directory in your server, else script will fail, or use any other folder you like.
# If you are changing the folder, reflect the change in systemd-web-demo service too.
autoDeploy:
  stage: autodeploy
  tags:
   - backend_tag
  script:
    - cd Backend/src/spring-boot 
    - mvn package
    - sudo mv /Backend/src/spring-boot/*.jar /target/web-demo.jar 
    - sudo systemctl stop systemd-web-demo
    - sudo systemctl start systemd-web-demo
    
# IOS Project
#iosbuild:
#  stage: iosbuild
#  tags:
#   - frontend_tag
#  script:
#    - cd Frontend
#    - cd Habitat
#    - xcodebuild -list
#    - xcodebuild clean -workspace Habitat.xcworkspace -scheme Habitat | xcpretty
#    - xcodebuild test -workspace Habitat.xcworkspace -scheme Habitat -destination 'platform=iOS Simulator,name=iPhone 8,OS=12.0' | xcpretty -s